<?php
/*
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 * @license     http://opensource.org/licenses/MIT The MIT License
 */
namespace Genesis\API\Request\Base\Financial\Cards\Asynchronous;

/**
 * Class ASale3D
 *
 * Abstract Base Class for ASynchronous Sale Transactions
 *
 * @package Genesis\API\Request\Base\Financial\Cards\Asynchronous
 *
 * @method $this setGaming($value) Signifies whether a gaming transaction is performed.
 * @method $this setMoto($value) Signifies whether a MOTO (mail order telephone order) transaction is performed.
 * @method $this setMpiCavv($value) Set the Verification Id of the authentication.
 * @method $this setMpiEci($value) Set Electric Commerce Indicator as returned from the MPI.
 * @method $this setMpiXid($value) Set Transaction ID that uniquely identifies a 3D Secure check request
 * @method $this setDynamicMerchantName($value) Dynamically override the charge descriptor
 * @method $this setDynamicMerchantCity($value) Dynamically override the merchant phone number
 */
abstract class ASale3D extends \Genesis\API\Request\Base\Financial\Cards\Asynchronous\AbstractTransaction
{
    /**
     * Signifies whether a gaming transaction is performed.
     *
     * Gaming transactions usually use MCC 7995, contact tech support for more details.
     *
     * @var bool
     */
    protected $gaming;

    /**
     * Signifies whether a MOTO (mail order telephone order) transaction is performed.
     *
     * Contact tech support for more details.
     *
     * @var bool
     */
    protected $moto;

    /**
     * Verification Id of the authentication.
     *
     * Please note this can be the CAVV for Visa Card or UCAF to identify MasterCard.
     *
     * @var string
     */
    protected $mpi_cavv;

    /**
     * Electric Commerce Indicator as returned from the MPI.
     *
     * @var string
     */
    protected $mpi_eci;

    /**
     * Transaction ID generated by the 3D Secure service
     * that uniquely identifies a 3D Secure check request
     *
     * @var string
     */
    protected $mpi_xid;

    /**
     * Allows to dynamically override the charge descriptor
     *
     * @var string
     */
    protected $dynamic_merchant_name;

    /**
     * Allows to dynamically override the mer- chant phone number
     *
     * @var string
     */
    protected $dynamic_merchant_city;

    /**
     * Set the required fields
     *
     * @return void
     */
    protected function setRequiredFields()
    {
        $requiredFields = array(
            'transaction_id',
            'amount',
            'currency',
            'card_holder',
            'card_number',
            'expiration_month',
            'expiration_year',
        );

        $this->requiredFields = \Genesis\Utils\Common::createArrayObject($requiredFields);

        $requiredFieldsConditional = array(
            'notification_url'   => array('return_success_url', 'return_failure_url'),
            'return_success_url' => array('notification_url', 'return_failure_url'),
            'return_failure_url' => array('notification_url', 'return_success_url'),
        );

        $this->requiredFieldsConditional = \Genesis\Utils\Common::createArrayObject($requiredFieldsConditional);

        $requiredFieldsGroups = array(
            'synchronous'  => array('notification_url', 'return_success_url', 'return_failure_url'),
            'asynchronous' => array('mpi_eci'),
        );

        $this->requiredFieldsGroups = \Genesis\Utils\Common::createArrayObject($requiredFieldsGroups);
    }

    /**
     * Return additional request attributes
     * @return array
     */
    protected function getRequestTreeStructure()
    {
        $treeStructure = parent::getRequestTreeStructure();

        return array_merge(
            $treeStructure,
            array(
                'gaming'     => $this->gaming,
                'moto'       => $this->moto,
                'mpi_params' => array(
                    'cavv' => $this->mpi_cavv,
                    'eci'  => $this->mpi_eci,
                    'xid'  => $this->mpi_xid
                ),
                'dynamic_descriptor_params' => array(
                    'merchant_name' => $this->dynamic_merchant_name,
                    'merchant_city' => $this->dynamic_merchant_city
                )
            )
        );
    }
}
